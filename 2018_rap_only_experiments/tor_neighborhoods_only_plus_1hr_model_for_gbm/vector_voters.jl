# Does even worse that adaptive_knn.jl!! Struggles to beat 0.15 training loss (VERY bad).
# With some manual adjustment, can get it as good as a constant guess. But no, not really any good.

# println("Loading Flux...")
# using Flux
using BSON: @load

USE_NORMALIZING_FACTORS = false
DO_BACKPROP             = false

VOTER_COUNT = 200

mutable struct VectorVoters{N,M,O}
  Îµ::Float32
  w::N # Dimension weights, the only learned parameter
  vvw::O
  vvb::M
  negative_poles::Array{Float32,2}
  positive_poles::Array{Float32,2}
end

# Flux.treelike(VectorVoters)

# From adaptive KNN L1 distance weights. A better place to start than just the feature normalizers.

const STARTING_DIMENSION_WEIGHTS = Float32[0.0768515, 0.0679083, 0.101167, -8.51512f-7, 0.00424719, 0.0423548, 1521.06, 2099.99, 2113.39, 1521.06, 1854.4, 2390.72,
-4.41449f-5, -1.77146f-5, 2.6327f-5, 1.31672f-5, -0.000394853, 1.93744f-5, 1.28874f-5, 1.57646f-5, 2.55506f-5, -3.76675f-6, 0.000354073, -1.56453f-5, 0.01096, 2.38572f-5,
-2.85539f-5, 1.56498f-5, -0.000471141, 2.10491f-5, 1.77695f-5, -9.30136f-6, -1.19257f-5, -1.25186f-5, 0.0113016, -1.26445f-5, 0.990614, 1.38382, 0.999619, 0.965942,
2.21029, 1.65514, 0.998096, 0.985854, 0.999746, 0.975496, 0.985122, 0.980091, 1.27675f-5, 1.81482f-5, 8.17135f-6, 1.99625f-5, 1.99394f-7, 1.76095f-5, -9.6564f-6,
-1.79998f-5, 1.1984f-5, 2.25565f-5, 2.29329f-7, 1.58814f-5, -1.6765f-5, -1.6753f-5, 3.78092f-6, -3.29103f-5, 3.37494f-5, -1.17819f-5, 3.28657f-5, 1.04229f-5, -1.26941f-5,
-2.65158f-5, 4.51093f-5, 1.29678f-5, 1.17895, 1.1881, 1.11009, 0.805075, 1.06718, 1.09536, 0.935585, 1.15091, 0.967004, 0.93711, 1.10256, 1.44091, -5.0178f-5, 4.59133f-5,
-4.50707f-5, 7.10029f-5, 0.00175271, -6.11677f-5, 2.83647f-5, 3.47804f-5, -3.0226f-5, 1.83155f-5, -5.1985f-5, -1.91624f-5, -2.92066f-6, 1.22406f-6, -1.06426f-6,
-1.07891f-6, 6.34198f-6, 1.76712f-6, 3.28421f-5, -5.91757f-5, 0.0182052, 0.0122821, 0.0964043, -0.00014766, 0.0874874, 0.0809856, 0.185855, 1.84242f-5, 0.0189145,
0.0706601, 1.95932f-5, -9.97336f-6, 1.7664f-5, -2.85112f-5, -1.71531f-5, -1.98227f-5, 2.11687f-5, -1.81153f-5, -1.49525f-5, -1.61636f-5, 0.0048453, 1.75903f-5,
0.00201138, 0.00303888, -0.00018223, 0.00773339, 7.71298f-6, 0.00427506, 1.76232f-5, -1.25791f-5, -1.78458f-5, -1.70551f-5, -3.08263f-5, 1.85237f-5, -2.03263f-5,
2.23145f-5, 1.17735f-5, 1.74058f-5, 0.0103186, 1.42928f-5, -3.29707f-5, 3.28949f-5, 2.65398f-5, -2.74291f-5, 0.00471066, 2.50374f-5, -3.38654f-5, 2.95395f-5, 3.09504f-5,
3.23791f-5, -1.94152f-5, 3.1741f-5, -3.46526f-5, 3.34602f-5, -3.9893f-5, -3.79743f-5, 2.49883f-5, 3.83265f-5, 3.79184f-5, 3.73768f-5, 4.3051f-5, -3.85336f-5, 3.80515f-5,
3.86823f-5, 3.87712f-5, 3.5261f-5, 3.98896f-5, -3.65788f-5, -4.43757f-5, -3.87431f-5, -3.84948f-5, 3.73512f-5, -3.76694f-5, -3.76094f-5, -4.6771f-5, 3.73734f-5,
3.9081f-5, 3.90373f-5, -3.6146f-5, 3.78655f-5, -5.08395f-5, 3.58561f-5, -3.57331f-5, 3.78616f-5, -4.25223f-5, -3.47226f-5, 4.7315f-5, 3.60755f-5, -3.18217f-5, 3.46804f-5,
3.97749f-5, 3.651f-5, 5.30279f-5, -3.48455f-5, -3.34145f-5, -3.68453f-5, 3.46724f-5, 3.40651f-5, 3.66309f-5, -3.51128f-5, 3.12698f-5, -3.30125f-5, 3.6798f-5, 3.53171f-5,
3.35737f-5, 3.32216f-5, 3.42217f-5, 3.18322f-5, -3.47943f-5, -3.14105f-5, -3.6317f-5, -3.18669f-5, -3.40637f-5, -3.55129f-5, 3.92629f-5, 2.95816f-5, 2.29273f-5,
3.04603f-5, 3.20319f-5, -3.21155f-5, -3.72973f-5, -2.79281f-5, -3.0959f-5, 2.77692f-5, 2.63043f-5, 3.06744f-5, -3.01455f-5, -2.6762f-5, 1.35479f-5, 3.10088f-5,
-2.98143f-5, 3.24166f-5, -2.64828f-5, -2.21758f-5, -1.84379f-6, 2.67974f-5, 2.56391f-5, 2.33439f-5, -2.8193f-5, 2.28008f-5, 3.85166f-6, 2.2451f-5, 2.85856f-5,
-2.32576f-5, -2.07276f-5, -2.42362f-5, -6.50765f-6, -2.50949f-5, 1.74615f-5, 1.96365f-5, 1.93737f-5, 2.11492f-5, -5.64209f-6, 2.41198f-5, 2.17811f-5, 1.73757f-5,
-2.55497f-5, 2.46907f-5, 2.61213f-6, 2.24349f-5, 2.69304f-5, 1.9627f-5, 2.36647f-5, 2.16179f-5, 5.32637f-6, -1.77813f-5, -1.75962f-5, 2.14286f-5, 2.7063f-5, 2.88848f-5,
2.8559f-7, 2.57125f-5, 2.32446f-5, 2.32401f-5, 3.11171f-5, -2.97498f-5, 5.93423f-6, -2.98053f-5, -3.20057f-5, -3.40505f-5, -3.81863f-5, -2.50691f-5, -1.39432f-6,
2.89183f-5, -3.97078f-5, 3.91529f-5, -4.0266f-5, 4.23671f-5, -4.88442f-7, -3.71319f-5, 4.79073f-5, -4.09002f-5, 4.88737f-5, -4.34015f-5, 4.91485f-5, 4.16886f-5,
4.33997f-5, 4.53375f-5, 4.61706f-5, -4.32924f-5, 0.000101367, 4.61762f-5, -4.89582f-5, -4.82942f-5, -6.02938f-5, -4.88027f-5, -0.000129781, -5.08926f-5, 5.45819f-5,
6.035f-5, 6.19118f-5, -5.51263f-5, 0.000145201, 6.17596f-5, -5.70838f-5, -5.59555f-5, 6.04193f-5, 5.66527f-5, 0.000124035, -5.97673f-5, 0.000103625, 0.000123565,
-8.93233f-5, 0.000193531, 8.84029f-5, 0.000143262, -0.000251472, -0.000262978, -0.00021219, 0.000315481, -3.65019f-5, 0.000267248, -0.000327589, -0.000334354,
-0.000288886, 0.000347515, 7.12666f-6, 0.000336407, 7.795f-6, -2.29566f-5, -8.54358f-6, 3.29127f-5, -2.55346f-5, 2.22528f-5, -2.82139f-5, -3.92131f-5, 3.89232f-5,
-3.07736f-5, -8.85791f-5, -5.05622f-5, 0.00312754, 0.00667317, 2.36222f-5, 0.00543982, 0.00767236, 0.0101089, -1.19677f-5, 9.44239f-6, 1.99822f-5, 1.46835f-6,
-6.38541f-6, -5.73017f-6, -2.11014f-5, 2.3587f-5, -2.12059f-5, 3.04775f-5, 4.51164f-5, -2.55688f-5, 8.19859f-5, 3.27602f-5, 0.000213826, 0.000193884, 0.000145784,
-0.000130212, 5.23099f-5, 4.29311f-5, -3.18459f-5, 9.72807f-5, 0.00293016, -5.50948f-5, 4.72637f-5, 5.06819f-5, 6.01008f-5, 4.86615f-5, -0.000162656, 4.68883f-5,
0.0249878, 0.0240082, 2.47892f-5, 0.0546138, -3.37926f-5, 0.00782901, 0.0227194, 0.0252434, -1.76982f-5, 0.0752381, -1.12214f-5, 0.00755432, -4.70681f-5, 4.87033f-5,
-6.85606f-5, 3.37086f-5, 0.00641413, 4.92086f-5, -2.43264f-5, 3.34656f-5, -5.19067f-5, 2.00099f-5, 0.047874, -3.12347f-5, 0.0246404, 0.00341541, 0.0414859, 3.65782f-6,
0.00855867, 1.67437f-6, 1.02926, 1.08894, 0.923377, 0.990108, 1.04575, 1.08472, 1.79285f-5, 1.37655f-5, -4.91877f-5, -1.12456f-5, 0.0332387, -1.15318f-5, -0.000262204,
0.000265771, 0.000173806, -0.00397639, 1.1189f-5, -0.000759868, 0.104316, 0.084309, 0.0204941, 0.054633, 0.0901465, 0.0491249, 3.48268f-5, 3.48023f-5, 1.05074f-5,
-5.45022f-5, 1.42336f-5, 2.14716f-5, -3.94721f-5, 3.18865f-5, -3.6032f-5, -2.91166f-5, 0.0381238, -4.06732f-5, 9.69927f-5, -0.000128865, -0.00012076, 0.00915366,
0.00785539, 0.000129602, 55.8739, 101.563, 178.571, 55.8706, 105.647, 151.941, -9.54414f-6, 1.95842f-5, -2.87168f-5, -1.53849f-5, 1.68904f-5, -2.10794f-5, -5.41359f-5,
-5.79237f-5, -5.48589f-5, 6.78693f-5, 0.000207578, -5.4604f-5, -2.6359f-5, 2.74014f-5, -3.52683f-5, -2.3295f-5, -4.26342f-5, -2.37728f-5, -0.000119224, -8.99593f-5,
-0.000122143, 7.03082f-5, -0.000332562, -8.8663f-5, -5.36306f-5, -5.25799f-5, -5.13323f-5, -6.4104f-5, -0.000208978, -5.42541f-5, -9.05787f-5, -7.59856f-5, -8.60345f-5,
-5.44868f-5, -4.13971f-5, -6.63338f-5, 0.000357302, -8.25456f-5, 4.33633f-5, 0.0263757, 0.0269548, 7.19672f-5, 0.119329, 0.116363, 8.17425f-5, 0.0962341, 0.0365236,
0.101551, 0.107002, 0.115181, -4.57334f-5, 0.122036, 0.0481731, 0.122203, 0.150561, 0.19789, 1.27939f-5, 0.187076, 0.0439579, 0.203049, -9.36346f-5, -9.01956f-5,
0.00330093, -9.80734f-5, 0.000749673, 6.32989f-5, -8.23066f-7, 2.77166f-7, 4.21605f-7, 0.0382214, 0.0294818, 1.47303f-6, 0.00785204, 0.014668, 0.0307488, 0.000788493,
1.90131f-5, 0.0219523, -4.02797f-5, -3.82593f-5, 4.61964f-5, -8.35736f-5, 0.00819009, 4.86483f-5, -3.0874f-5, -5.31572f-5, 5.82354f-5, -4.84054f-5, 0.000118924,
-6.25784f-5, -4.10075f-5, 3.4406f-5, -2.89143f-5, -4.89611f-5, 0.00215763, 4.14656f-5, 1.52251f-6, 1.23935f-5, -7.45122f-5, 0.0136493, 0.0334802, 3.49274f-5, 7.15497f-6,
-2.03062f-5, 3.46734f-5, -1.48398f-5, -3.88857f-5, -2.40102f-5, 0.0290437, 0.0273715, 0.0317698, 0.0253251, 0.0368806, 0.0232875, -1.05295f-5, 2.10914f-5, -1.21082f-5,
9.24179f-6, -3.95373f-5, 1.59672f-5, -5.12248f-5, 4.9862f-5, -4.2164f-5, 4.05586f-5, 0.0107725, -5.03547f-5, 0.0316092, 0.0231459, 0.0314898, 0.00939192, 0.0432969,
0.0124581, 0.0200094, 0.00793446, 0.0211842, -0.000135135, 0.0306873, 0.000185854, 0.00383626, -0.000133676, -8.67772f-5, 0.000337107, 0.0392576, -4.52545f-5,
-3.58496f-5, 4.27476f-5, -7.49576f-5, 7.82725f-5, 0.0343681, -3.72021f-5, 6.3133f-5, -4.08471f-5, -4.6716f-5, 0.00010777, 0.00699537, 4.93596f-5, 4.09686f-5, 2.72588f-5,
2.179f-5, 5.35504f-5, 0.0241786, -2.24116f-5, 7.81734f-6, -9.68549f-6, 1.0383f-5, -9.57504f-6, 0.0212562, 8.95578f-6, -4.09121f-5, -3.66193f-5, 2.39001f-5, 1.25541f-5,
0.0203558, -1.99862f-5, -2.44909f-5, -2.38121f-5, -5.30639f-5, -9.3709f-6, 0.0240403, -2.79794f-5, -1.85302f-5, 2.72218f-5, -8.75049f-5, -7.11358f-6, 0.0282638,
2.95617f-5, -1.52697f-5, 1.80307f-5, -1.85934f-5, -6.77187f-6, 0.0238299, -1.49023f-5, 7.22573f-6, 1.10415f-5, -1.33455f-5, -6.05795f-6, 0.0202953, 6.59748f-6,
-2.68256f-7, -8.82619f-6, 9.94006f-6, -1.00497f-5, 0.0197816, -5.74527f-6, 9.51894f-6, -4.6065f-6, -3.04047f-5, 6.48216f-6, 0.0160886, -5.85723f-6, 1.92955f-7, 6.0769f-6,
0.00903925, 1.15247f-5, 0.0153337, -5.081f-6, 5.93552f-6, -5.44353f-6, 0.0128364, -9.81788f-6, 0.0170045, -2.04735f-6, 6.40632f-5, -2.88585f-6, 0.0102121, -1.27726f-6,
0.021568, -2.69232f-7, -6.70468f-5, 5.0071f-5, -6.15944f-5, -6.61024f-5, 6.69802f-5, -4.91466f-5, -1.22424f-6, -1.11391f-6, 0.00207357, 0.00602045, 0.0257334,
-2.90982f-7, -1.35817f-6, 1.31574f-6, -1.44651f-6, 0.029985, 0.0271989, -7.95119f-8, 9.8544f-7, 4.71658f-7, -1.14581f-5, 0.0585695, 0.0300603, 4.6196f-7, 0.00990876,
0.00101074, -4.02474f-5, 0.0873781, 0.0376445, -4.1341f-7, 0.0314609, 0.0173137, -4.6649f-5, 0.0896769, 0.0468867, 1.04731f-6, 0.0392045, 0.0196439, -4.74808f-5,
0.0738761, 0.0422587, -3.27332f-5, 0.0230923, 0.00191225, 5.48983f-5, 0.0273804, 0.0304626, 3.41465f-5, 4.53996f-5, 5.374f-5, -7.18941f-5, 2.72253f-5, 0.0182488,
-4.47537f-5, 4.46325f-5, 6.66534f-5, -7.95131f-5, 3.9286f-5, 0.0076993, 6.86417f-5, -3.91358f-5, 6.38711f-5, -8.35308f-5, 4.10053f-5, 0.000440915, 6.68436f-5,
-5.03992f-5, -5.51891f-5, -7.29612f-5, 4.58414f-5, 0.000441546, 6.09463f-5, -4.00871f-5, -4.73603f-5, -7.26595f-5, 5.35387f-5, -0.000423436, -6.55681f-5, 0.000111471,
-5.14756f-5, 6.62246f-5, 5.43367f-5, -0.000118764, 5.83186f-5, -4.36692f-5, -4.39704f-5, 7.25459f-5, 5.63802f-5, 0.000240528, 5.52749f-5, 3.94904f-5, 3.94968f-5,
-3.59154f-5, 5.13802f-5, 0.000107457, 4.65281f-5, 5.09252f-5, 4.49117f-5, -0.000103502, -4.65037f-5, 0.000827602, 4.25678f-5, 4.04917f-5, -3.66438f-5, -3.76608f-5,
6.18336f-5, 0.006452, 4.70329f-5, -6.8015f-7, 6.2175f-7, -1.60505f-6, 0.0402065, 0.0300262, 3.95598f-7, 0.552616, 1.64855, 5.38641, 0.502082, 1.61305, 1.87787, 46.3018,
47.6215, 48.9772, 46.3018, 101.815, 48.7416, 47.3982, 48.3498, 49.4359, 46.8768, 100.409, 49.4545, -1.85086f-5, 2.3096f-5, 2.18688f-5, 2.41184f-5, 4.45734f-5, 2.07906f-5,
0.0283541, 0.027729, 0.0251435, 0.0295631, 0.204006, 0.0264415, -2.42704f-5, 2.22617f-5, -2.03245f-5, -1.48639f-5, 0.0476243, 2.08829f-5, 5.14806f-5, -4.04378f-5,
-3.76316f-5, -4.41098f-5, 0.00718618, -4.53484f-5, 5.17348f-5, 5.4369f-5, 7.33865f-5, 5.19311f-5, 0.148882, 4.46607f-5, -0.000340678, -0.000329424, -0.000303545,
-0.000333575, 0.133985, -0.000320011, -5.0768f-5, 5.15214f-5, -3.77727f-5, -4.02848f-5, 0.00895422, -5.00906f-5, 0.00605663, 0.0059883, 0.00886794, 0.00425544, 0.166361,
0.00576124, -5.03043f-5, 3.8719f-5, 3.79969f-5, -5.42758f-5, 0.0125842, 5.01886f-5, 1.94785f-5, -1.31333f-5, 1.06753f-5, 1.00274f-5, 0.00647938, -1.29702f-5, 0.00472848,
0.00481641, 0.00597286, 0.00384169, 0.15138, 0.00558613, 0.00481944, 0.0048029, 0.000400352, 0.00774857, 0.122571, 0.00496235, 8.23636f-5, 8.47178f-5, -8.68811f-5,
0.00207343, 0.156434, -7.54521f-5, 6.96233f-5, -7.80477f-5, 7.21508f-5, -7.01975f-5, 0.256744, -8.84557f-5, 1.78772f-5, -2.59085f-5, 8.63841f-6, -1.16128f-5, 1.55538f-6,
-1.98235f-5, 6.35587f-5, 6.32265f-5, 5.9327f-5, -6.49082f-5, 0.285755, 7.10969f-5, 5.50598f-5, -5.81022f-5, 5.47514f-5, 6.19471f-5, 0.228824, -5.49246f-5, -4.62313f-5,
4.69765f-5, -4.75556f-5, -4.7012f-5, 0.245904, 4.76689f-5, -4.39525f-5, -4.29858f-5, 4.01958f-5, 4.36307f-5, 0.193379, -4.56483f-5, 4.0159f-5, -3.89886f-5, -3.63513f-5,
-4.0784f-5, 0.184602, -3.95497f-5, -3.65982f-5, 3.57281f-5, 3.69335f-5, 4.1687f-5, 0.192019, 4.18566f-5, 3.71362f-5, 3.73985f-5, 4.07686f-5, 3.81005f-5, 0.211484,
-4.1216f-5, -4.08226f-5, -4.09817f-5, 4.57612f-5, -3.64048f-5, 0.202137, -4.02599f-5, 3.73168f-5, 4.29016f-5, 5.04437f-5, 4.41998f-5, 0.191503, -4.12489f-5, -4.10779f-5,
4.18028f-5, -5.36252f-5, 4.55188f-5, 0.157532, 4.14186f-5, -3.73634f-5, -3.97545f-5, 4.87484f-5, 3.25349f-5, 0.133196, -3.54514f-5, -4.05278f-5, -3.8906f-5, -4.26241f-5,
-4.07565f-5, 0.111411, 4.19784f-5, 2.24856f-5, 3.1309f-5, -1.81982f-5, -2.02759f-5, -5.50372f-6, -1.01889f-5, 3.7333f-5, -3.54437f-5, -3.29133f-5, 2.93918f-5, 0.0921788,
-3.70195f-5, -2.79852f-5, 3.60041f-5, 2.22897f-5, -2.95614f-5, 0.0751531, 3.77832f-5, -2.4959f-5, 2.40245f-5, -2.07805f-5, 3.64321f-5, 0.0665347, -2.56811f-5, 2.01283f-5,
2.0943f-5, -3.03701f-5, -2.09266f-5, 0.0579957, -2.20022f-5, 3.29208f-5, -2.68102f-5, -2.47597f-5, -2.56202f-5, 0.0510334, -2.58423f-5, 3.0852f-5, -3.4978f-5,
-3.11245f-5, -3.01124f-5, 0.0429327, 3.37471f-5, -4.73578f-5, -4.64818f-5, 3.71682f-5, -3.75191f-5, 0.0385844, 3.74612f-5, 4.34613f-5, 5.28534f-5, 4.12335f-5, 5.20569f-5,
0.0338464, -5.51674f-5, 1.4454f-5, 2.44911f-5, 6.25892f-6, 1.49041f-5, 0.00089231, -2.01198f-5, -5.77047f-5, 5.64509f-5, -5.57902f-5, -5.73522f-5, 0.0274652, 5.85172f-5,
-4.97107f-5, -4.66955f-5, 4.75428f-5, 6.42322f-5, 0.0217273, 6.05955f-5, -4.38419f-5, 4.43973f-5, 4.44467f-5, -5.77417f-5, 0.025999, 4.55657f-5, 4.26188f-5, -4.27809f-5,
-4.20916f-5, -3.9631f-5, 0.0274171, 3.99226f-5, 3.06337f-5, 2.274f-5, -2.7721f-5, -2.34974f-5, 0.00295322, -2.39569f-5, 3.25972f-5, -3.76577f-5, 4.1308f-5, -3.19686f-5,
0.0319984, -2.86416f-5, -2.68758f-5, -2.75009f-5, 3.55667f-5, 1.76292f-5, 0.0384662, -2.61057f-5, -2.74424f-5, -2.79133f-5, -2.50715f-5, -1.55284f-5, 0.0449992,
-2.0019f-5, -2.54435f-5, 1.81351f-5, -2.49732f-5, -1.4752f-5, 0.0488847, 1.9028f-5, -2.62998f-5, -2.80257f-5, -1.67372f-5, 2.69201f-5, 0.0409861, -2.00806f-5,
-7.82397f-5, 6.1915f-5, -5.6558f-5, -7.81403f-5, 0.0245319, -6.47768f-5, 6.22173f-5, 5.53442f-5, -5.33777f-5, -6.22411f-5, -0.000186222, -6.6055f-5, 0.895136, 2.0555,
1.89575, 0.932393, 1.43384, 3.42553, 0.237898, 0.663869, 0.550922, 0.217529, 0.30929, 1.0256, 0.110885, 0.435845, 0.350636, 0.0764912, 0.147026, 0.749945, 0.607006,
1.29479, 0.685075, 0.714244, 0.86116, 2.29994, 0.31354, 0.499744, 0.271502, 0.595098, 0.352467, 0.938482, 0.104537, 0.354996, 0.3603, 0.0945496, 0.144036, 0.608479,
0.184792, 0.302436, 0.227346, 0.533149, 0.296505, 0.514259, 0.0987442, 0.299341, 0.367873, 0.110735, 0.138519, 0.543729, 0.196756, 0.2858, 0.302631, 0.407047, 0.259071,
0.494375, 0.232163, 0.347382, 0.386975, 0.315495, 0.263929, 0.523341, 0.275097, 0.406903, 0.463999, 0.30511, 0.301843, 0.569892, 0.29512, 0.438339, 0.492695, 0.310915,
0.271244, 0.594222, 0.066689, 0.39406, 0.127546, 0.014441, 0.150174, 0.719321, 0.303149, 0.448735, 0.494695, 0.30078, 0.246755, 0.602588, 0.30945, 0.442308, 0.489151,
0.274153, 0.241583, 0.597454, 0.310535, 0.431228, 0.477106, 0.250219, 0.243685, 0.58259, 0.306548, 0.41533, 0.459251, 0.247151, 0.228742, 0.56108, 0.291606, 0.395872,
0.430058, 0.234743, 0.208012, 0.536616, 0.269764, 0.374502, 0.396277, 0.232855, 0.190849, 0.512242, 0.249438, 0.353802, 0.368453, 0.224272, 0.180231, 0.489325, 0.229448,
0.334958, 0.344222, 0.207305, 0.169627, 0.469493, 0.213293, 0.319866, 0.328423, 0.193375, 0.156684, 0.455234, 0.200551, 0.307505, 0.317428, 0.18808, 0.145415, 0.442,
0.19191, 0.299274, 0.310882, 0.188955, 0.140723, 0.433893, 0.185903, 0.292752, 0.308154, 0.189754, 0.137927, 0.427013, 0.105836, 0.456152, 0.31018, 0.035594, 0.162598,
0.787153, 0.181309, 0.290639, 0.309769, 0.183526, 0.140061, 0.424427, 0.176978, 0.289306, 0.315566, 0.166512, 0.138563, 0.423374, 0.173871, 0.292752, 0.325529, 0.154938,
0.146398, 0.427643, 0.173533, 0.297826, 0.342707, 0.151468, 0.157388, 0.434604, 0.175769, 0.304757, 0.364697, 0.153682, 0.175805, 0.448502, 0.182766, 0.31397, 0.392371,
0.15752, 0.17386, 0.470275, 0.195355, 0.323607, 0.420812, 0.159861, 0.173434, 0.495594, 0.211885, 0.338504, 0.442914, 0.168903, 0.175982, 0.529653, 0.228333, 0.361031,
0.455734, 0.188694, 0.180269, 0.572161, 0.238626, 0.386925, 0.451872, 0.213897, 0.189943, 0.597231, 0.247961, 0.416963, 0.42869, 0.242158, 0.21029, 0.633305, 0.265712,
0.447376, 0.404615, 0.280684, 0.241967, 0.691327, 0.113005, 0.461089, 0.355013, 0.0590779, 0.159374, 0.765825, 0.300577, 0.493819, 0.399957, 0.29328, 0.282058, 0.788862,
0.356267, 0.567643, 0.420529, 0.293102, 0.340904, 0.959373, 0.335164, 0.707854, 0.458323, 0.275936, 0.343002, 1.24123, 0.28512, 0.746736, 0.566605, 0.248013, 0.336223,
1.11572, 0.0209932, 0.203909, 0.255189, 0.0301908, 0.184753, 0.236148, 0.0791459, 0.245013, 0.0542661, 0.253473, 0.276889, 0.071045, 0.42174, 0.36876, 0.0434694,
0.178118, 0.225528, 0.000850948, 0.176166, 0.180307, 0.000978234, 0.175682, 0.180014, 0.00486478, 0.242273, 0.00017688, 0.208548, 0.176942, 0.0400075, 0.391798, 0.3923,
0.000456986, 0.174545, 0.179787, 0.0273266, 0.185896, 0.238221, 0.0321686, 0.181031, 0.231313, 0.0709451, 0.207025, 0.0294306, 0.249177, 0.264665, 0.0727484, 0.432165,
0.368594, 0.0393227, 0.177245, 0.22425, -5.37724f-5, 0.141443, 0.158262, -5.65438f-5, 0.133616, 0.146018, -2.63635f-5, 0.151535, -0.000131756, 0.193743, 0.185655,
-1.45865f-5, 0.440835, 0.372719, 5.00195f-5, 0.12412, 0.138428, 0.00488477, 0.163906, 0.179285, 0.00388738, 0.163745, 0.179101, 0.00378239, 0.231678, 0.00303736, 0.18658,
0.174521, 1.94997f-5, 0.395807, 0.385293, 0.00161155, 0.16347, 0.178859, 8.91395f-7, 0.14857, 0.174524, -4.64618f-6, 0.149488, 0.175941, 1.20631f-6, 0.219647, 6.15296f-6,
0.172029, 0.163612, 7.83641f-6, 0.37762, 0.364816, -7.25159f-6, 0.151398, 0.177847, -5.27777f-5, 0.118964, 0.134254, 4.72255f-5, 0.109601, 0.123582, -7.03812f-5,
0.148001, -0.00012889, 0.178781, 0.168361, 1.08761f-5, 0.412007, 0.366259, 5.20433f-5, 0.102792, 0.118539, -2.60553f-5, 0.172855, 0.206631, -2.68537f-5, 0.171816,
0.207417, -2.17199f-5, 0.242303, -1.16647f-5, 0.201411, 0.195505, 0.010114, 0.365428, 0.397499, 2.71689f-5, 0.170429, 0.208154, 0.00675362, 0.105536, 0.126514,
-0.000220407, 0.096176, 0.115876, 0.000259275, 0.146069, -9.20219f-5, 0.174328, 0.160054, 2.7289f-7, 0.402874, 0.362059, 0.000149461, 0.090409, 0.110843, -6.04385f-5,
0.189945, 0.224692, 6.04492f-5, 0.189564, 0.225556, -5.36992f-5, 0.255458, -6.28027f-5, 0.220394, 0.215685, 0.0169536, 0.3568, 0.397261, -5.80731f-5, 0.186688, 0.22589,
4.41907f-5, 0.190273, 0.219744, -4.03426f-5, 0.188634, 0.22006, 4.09213f-5, 0.258029, 3.66616f-5, 0.219335, 0.214095, 0.0202108, 0.34967, 0.381318, -3.89897f-5, 0.18606,
0.22034, -3.92542f-5, 0.18536, 0.214247, 3.92889f-5, 0.184052, 0.214001, 5.22035f-5, 0.254095, 3.77188f-5, 0.213692, 0.206553, 0.00929239, 0.343576, 0.367367, 5.45137f-5,
0.182162, 0.213433, -4.72412f-5, 0.181365, 0.211514, 5.09802f-5, 0.180178, 0.211018, 6.13408f-5, 0.249693, 4.95498f-5, 0.210923, 0.204901, 0.0202183, 0.343376, 0.365782,
6.93007f-5, 0.178122, 0.209687, 4.67048f-5, 0.196138, 0.243123, -4.97616f-5, 0.183964, 0.226593, -5.05817f-5, 0.214994, -0.00010503, 0.251704, 0.25969, 0.0312644,
0.436393, 0.381126, 6.17059f-5, 0.17842, 0.216541, -4.20218f-5, 0.173685, 0.201771, 3.62379f-5, 0.172467, 0.201042, -4.56081f-5, 0.242049, 4.41095f-5, 0.206775, 0.20037,
0.0124403, 0.342765, 0.368005, -5.33231f-5, 0.17058, 0.200776, -3.77254f-5, 0.16955, 0.191486, 3.92782f-5, 0.167873, 0.19115, 3.64862f-5, 0.235198, -4.01661f-5, 0.199318,
0.192068, 0.00696291, 0.344007, 0.36614, -3.52737f-5, 0.165269, 0.19064, 3.23219f-5, 0.164721, 0.185287, -2.78548f-5, 0.162408, 0.184076, 3.88368f-5, 0.231913,
3.68881f-5, 0.19231, 0.183205, 0.00227369, 0.350992, 0.363538, 3.66519f-5, 0.159806, 0.183248, 3.38302f-5, 0.160683, 0.179934, -3.9586f-5, 0.15818, 0.177909, 4.6634f-5,
0.226701, 3.91309f-5, 0.186221, 0.178043, -2.62776f-5, 0.350558, 0.360378, -4.53608f-5, 0.155557, 0.17683, 4.03575f-5, 0.157167, 0.177288, 3.91299f-5, 0.154859, 0.175041,
5.49186f-5, 0.221872, -3.52021f-5, 0.184574, 0.178367, 1.61248f-5, 0.353873, 0.359363, 4.55651f-5, 0.15113, 0.17311, -3.31326f-5, 0.1541, 0.177705, 4.47365f-5, 0.151123,
0.174994, -5.0972f-5, 0.215567, 2.87672f-5, 0.182965, 0.180381, 1.37444f-5, 0.358317, 0.356426, -4.39769f-5, 0.14675, 0.172371, 3.07337f-5, 0.150518, 0.177579,
-3.72828f-5, 0.147207, 0.174743, -4.94685f-5, 0.207741, -3.21858f-5, 0.180365, 0.181334, 1.08243f-5, 0.363148, 0.353074, -4.65213f-5, 0.142823, 0.171472, -3.92909f-5,
0.144899, 0.175737, -4.02959f-5, 0.141735, 0.172935, 5.17352f-5, 0.197361, 3.94712f-5, 0.178492, 0.18212, 2.78754f-5, 0.366925, 0.353946, -4.45798f-5, 0.137271, 0.169308,
4.56787f-5, 0.137302, 0.171175, -4.41959f-5, 0.133931, 0.168267, -5.24688f-5, 0.187084, 3.70062f-5, 0.177258, 0.180567, -3.24165f-5, 0.368545, 0.352988, -4.43798f-5,
0.130191, 0.164303, 4.03911f-5, 0.130278, 0.16625, -4.87232f-5, 0.127308, 0.163663, -5.84357f-5, 0.178357, 4.23642f-5, 0.179054, 0.180912, -1.98989f-5, 0.370898,
0.353371, -4.65604f-5, 0.124169, 0.160485, 4.40906f-5, 0.12433, 0.161772, 4.81059f-5, 0.120596, 0.159029, -5.4644f-5, 0.170827, -4.07084f-5, 0.179352, 0.180074,
-1.66041f-5, 0.378354, 0.35203, 4.69584f-5, 0.117227, 0.155815, -4.58474f-5, 0.120072, 0.160255, -4.6659f-5, 0.116546, 0.157023, 6.59916f-5, 0.167212, -4.3963f-5,
0.179946, 0.178614, 6.71015f-6, 0.386789, 0.356598, 4.59117f-5, 0.11273, 0.153089, 4.65816f-5, 0.180962, 0.214083, 5.35458f-5, 0.17347, 0.201147, -3.78041f-5, 0.182702,
0.000118485, 0.239395, 0.230026, 0.01013, 0.453225, 0.39314, -5.71791f-5, 0.165268, 0.190353, -4.81723f-5, 0.118997, 0.157665, -5.10616f-5, 0.115412, 0.154321,
-6.4165f-5, 0.166109, -4.23456f-5, 0.179827, 0.175674, -4.4794f-6, 0.397654, 0.360662, -5.16649f-5, 0.111251, 0.149784, -4.94402f-5, 0.114815, 0.150612, -5.02208f-5,
0.111811, 0.147457, -4.68443f-5, 0.161249, -3.82754f-5, 0.181623, 0.17175, 2.69061f-6, 0.406116, 0.361591, 4.4398f-5, 0.108478, 0.144754, -0.00013505, 0.110832, 0.146846,
-0.000113959, 0.107003, 0.143022, 0.000240788, 0.16015, -5.26605f-5, 0.182913, 0.168739, 2.11393f-5, 0.40944, 0.363381, 5.38409f-5, 0.105034, 0.140487, 0.000212834,
0.110191, 0.140911, -0.000197687, 0.10599, 0.137864, 0.000301331, 0.161652, 6.20378f-5, 0.184191, 0.166798, 3.50293f-5, 0.414286, 0.360444, -0.000129711, 0.103669,
0.136459, 0.000194456, 0.110983, 0.13498, -0.000176165, 0.107896, 0.131177, 0.00024592, 0.162124, 9.55922f-5, 0.182665, 0.164402, 3.88692f-5, 0.418664, 0.361863,
0.000122336, 0.10395, 0.129172, -0.000173127, 0.109806, 0.127569, -0.000125637, 0.106872, 0.124637, -0.000231639, 0.157582, 8.33158f-5, 0.182542, 0.161712, 7.83756f-6,
0.41354, 0.361433, -7.87862f-5, 0.105254, 0.124811, 0.000126152, 0.112633, 0.123399, 7.92018f-5, 0.109923, 0.120994, -0.000190598, 0.150551, -6.9615f-5, 0.185161,
0.161349, 1.07983f-5, 0.40888, 0.355899, 5.53621f-5, 0.108321, 0.121321, 6.12087f-5, 0.116811, 0.124297, 4.4534f-5, 0.112807, 0.120942, -0.000181827, 0.147315,
6.15803f-5, 0.187377, 0.164921, -3.87846f-7, 0.412366, 0.356729, -3.49992f-5, 0.109502, 0.119817, -4.58024f-5, 0.199153, 0.248875, -5.20138f-5, 0.183731, 0.231263,
4.95189f-5, 0.223701, -0.000109224, 0.254337, 0.267936, 0.0371089, 0.435239, 0.378228, -6.55301f-5, 0.180056, 0.221007, 0.000673205, 0.119816, 0.130111, -6.11591f-5,
0.116513, 0.125507, -0.000175531, 0.151458, 6.3695f-5, 0.193237, 0.17078, 4.90538f-6, 0.416594, 0.355505, 4.7004f-5, 0.112738, 0.123559, 0.0018293, 0.127423, 0.139818,
-6.70997f-5, 0.121983, 0.133466, 4.84453f-5, 0.156549, -8.79896f-5, 0.198854, 0.179561, 4.9154f-6, 0.430257, 0.355491, 5.23886f-5, 0.117912, 0.130022, -7.28834f-5,
0.139384, 0.15414, 7.07502f-5, 0.132856, 0.147071, -2.46474f-5, 0.160585, -9.63736f-5, 0.205221, 0.191084, 3.43552f-5, 0.446792, 0.364289, -4.75015f-5, 0.127443,
0.142061, -3.35114f-5, 0.149808, 0.170896, -2.64945f-5, 0.143839, 0.162973, -1.56486f-5, 0.159828, 9.59791f-5, 0.214294, 0.201821, -7.44826f-5, 0.461024, 0.372015,
3.25727f-5, 0.136948, 0.155939, -5.85425f-5, 0.162954, 0.185954, -6.2223f-5, 0.154947, 0.172781, -1.51968f-5, 0.163367, -0.000159095, 0.214276, 0.205272, -4.9515f-5,
0.460016, 0.38651, 7.00393f-5, 0.146445, 0.163555, 1.00203f-5, 0.158851, 0.188316, -3.41839f-6, 0.15286, 0.180134, -1.30261f-5, 0.166119, -6.4048f-5, 0.225809, 0.215337,
0.0108716, 0.465348, 0.378769, 1.14454f-5, 0.147706, 0.171643, -6.29257f-6, 0.168934, 0.206342, 4.25142f-6, 0.164033, 0.19746, 5.37768f-6, 0.174816, -2.78423f-5,
0.235797, 0.231175, 0.014539, 0.458311, 0.386532, -4.12665f-6, 0.159063, 0.188794, 7.66968f-6, 0.179468, 0.221878, 1.51082f-5, 0.175546, 0.214707, 3.08031f-5, 0.184119,
8.01215f-6, 0.243496, 0.246216, 0.0286437, 0.444271, 0.388971, 2.31897f-5, 0.171701, 0.206593, 0.00730177, 0.182645, 0.23333, 0.00680888, 0.179502, 0.226902, 0.0432886,
0.198415, 0.00825399, 0.249675, 0.261866, 0.0503048, 0.426044, 0.376835, 0.010285, 0.176691, 0.219904, 1.9123f-5, 0.172223, 0.198292, -2.05594f-5, 0.170165, 0.197425,
1.88413f-5, 0.238468, -2.00886f-5, 0.205199, 0.200676, 0.0148257, 0.366276, 0.36806, 2.21414f-5, 0.168015, 0.196253, -1.86676f-5, 0.155843, 0.183091, 2.85634f-6,
0.154023, 0.185054, 1.27137f-7, 0.227469, 1.84411f-6, 0.186982, 0.186756, -6.29918f-5, 0.380522, 0.394725, 2.71189f-6, 0.152646, 0.188615, -1.76096f-5, 1.28229f-5,
0.297182, 0.294919, 1.2002f-5, 0.169374, 1.88059f-5, 0.306343, 0.21183, 0.0099157, 0.485247, 0.414675, -1.58599f-5, 0.29326, 0.288104, -3.05798f-5, 0.205925, 0.209301,
-3.83059f-5, 0.20246, 0.213766, 5.05053f-5, 0.255623, -4.83849f-5, 0.198251, 0.219171, 3.04561f-5, 0.381382, 0.397821, -3.57964f-5, 0.195648, 0.217219]

function (vvs::VectorVoters)(x)
  Îµ, w, vvw, vvb, negative_poles, positive_poles = vvs.Îµ, vvs.w, vvs.vvw, vvs.vvb, vvs.negative_poles, vvs.positive_poles

  negative_poles_rescaled = negative_poles .* w
  positive_poles_rescaled = positive_poles .* w
  x_rescaled              = x .* w

  vectors = positive_poles_rescaled .- negative_poles_rescaled

  vector_lengths = sqrt.(sum(vectors .^ 2, 1))

  normalized_vectors = vectors ./ vector_lengths

  x_projections = sum((x_rescaled .- negative_poles_rescaled) .* normalized_vectors, 1)

  votes = clamp.(x_projections ./ vector_lengths, 0.1f0, 1.0f0) .^ 2f0

  Îµ + (1f0 - Îµ - Îµ) * mean(votes) ^ 2f0

  # nns_available = size(nns,2)
  #
  # if nns_available > 0
  #   # L1 distance
  #
  #   distances = sum(abs.((x .- nns) .* w), 1)
  #
  #   nn_is = sortperm(@view distances[1,:])
  #
  #   if nns_available >= k
  #     Îµ + (1f0 - Îµ) * mean(nn_labels[@view nn_is[1:k]])
  #   else
  #     Îµ + (1f0 - Îµ) * mean(nn_labels)
  #   end
  # else
  #   Îµ
  # end
end


function find_random_i_with_label(labels, target_label, weights)
  while true
    i = rand(1:length(labels))
    if labels[i] == target_label && rand() < weights[i]
      return i
    end
  end
end

function pretrain(data, labels, weights) # The weights will hardly matter but hey.
  # global model
  #
  # println("Learning dimension weights for L1 distance metric")
  #
  # w = param(STARTING_DIMENSION_WEIGHTS)
  #
  # optimizer = ADAM(params(w), 0.2 / 100_000)
  #
  # example_count = size(data, 2)
  #
  # checkpoint_loss = 0.0
  # checkpoint_distance_counts = 0 :: Int64
  #
  # pos_checkpoint_loss = 0.0
  # pos_checkpoint_distance_counts = 0 :: Int64
  #
  # neg_checkpoint_loss = 0.0
  # neg_checkpoint_distance_counts = 0 :: Int64
  #
  # for iteration = 1:1_000_000
  #   # positive pair
  #   pi1 = find_random_i_with_label(labels, 1.0f0)
  #   pi2 = find_random_i_with_label(labels, 1.0f0)
  #
  #   # opposite pair
  #   oi1 = find_random_i_with_label(labels, 0.0f0)
  #   oi2 = find_random_i_with_label(labels, 1.0f0)
  #
  #   positive_distance = sum(abs.((data[:,pi2] .- data[:,pi1]) .* w))
  #   opposite_distance = sum(abs.((data[:,oi2] .- data[:,oi1]) .* w))
  #
  #   if opposite_distance > 1e-10
  #     loss = positive_distance / opposite_distance
  #     back!(loss)
  #     optimizer()
  #     checkpoint_loss += Flux.Tracker.data(loss)
  #     checkpoint_distance_counts += 1
  #     pos_checkpoint_loss += Flux.Tracker.data(loss)
  #     pos_checkpoint_distance_counts += 1
  #   end
  #
  #   # negative pair
  #   ni1 = find_random_i_with_label(labels, 0.0f0)
  #   ni2 = find_random_i_with_label(labels, 0.0f0)
  #
  #   # opposite pair
  #   oi1 = find_random_i_with_label(labels, 0.0f0)
  #   oi2 = find_random_i_with_label(labels, 1.0f0)
  #
  #   negative_distance = sum(abs.((data[:,ni2] .- data[:,ni1]) .* w))
  #   opposite_distance = sum(abs.((data[:,oi2] .- data[:,oi1]) .* w))
  #
  #   if opposite_distance > 1e-10
  #     loss = negative_distance / opposite_distance
  #     back!(loss)
  #     optimizer()
  #
  #     checkpoint_loss += Flux.Tracker.data(loss)
  #     checkpoint_distance_counts += 1
  #     neg_checkpoint_loss += Flux.Tracker.data(loss)
  #     neg_checkpoint_distance_counts += 1
  #   end
  #
  #   if mod(iteration, 20_000) == 0 || iteration == 1
  #     println("$(iteration*2) backprops, same/opposite distance ratio: $(checkpoint_loss / checkpoint_distance_counts)\tneg/opposite $(neg_checkpoint_loss / neg_checkpoint_distance_counts)\tpos/opposite $(pos_checkpoint_loss / pos_checkpoint_distance_counts)")
  #     checkpoint_loss = 0.0
  #     checkpoint_distance_counts = 0
  #     pos_checkpoint_loss = 0.0
  #     pos_checkpoint_distance_counts = 0
  #     neg_checkpoint_loss = 0.0
  #     neg_checkpoint_distance_counts = 0
  #   end
  # end
  #
  # w_raw = Array{Float32,1}(Flux.Tracker.data(w))
  #
  # show(w_raw)
  #
  # model =
  #   VectorVoters(
  #     20,
  #     w_raw,
  #     zeros(Float32, FEATURE_COUNT,0),
  #     zeros(Float32, 0)
  #   )

  global model

  model.negative_poles = zeros(FEATURE_COUNT, VOTER_COUNT)
  model.positive_poles = zeros(FEATURE_COUNT, VOTER_COUNT)

  for k = 1:VOTER_COUNT
    neg_i = find_random_i_with_label(labels, 0.0f0, weights)
    pos_i = find_random_i_with_label(labels, 1.0f0, weights)

    model.negative_poles[:,k] = data[:,neg_i]
    model.positive_poles[:,k] = data[:,pos_i]
  end
end

model =
  VectorVoters(
    1f-8,
    param(STARTING_DIMENSION_WEIGHTS),
    param([0.01f0]),
    param(zeros(Float32, VOTER_COUNT) - 2.5f0),
    zeros(Float32, (0,0)),
    zeros(Float32, (0,0))
  )

points_per_epoch = 5156235 # Somewhat rough since we are droping some examples randomly.

optimizer = ADAM(params(model.w, model.vvw, model.vvb), 0.1 / points_per_epoch)
# optimizer = ()
# optimizer = SGD(params(model), 1.0 / 40000)

loss_func = Flux.binarycrossentropy

# function update_model(model, x, label, example_loss)
#   # Eventually want to calculate loss per nn and kick out the worst nn.
#   if rand() < ADD_RATE * example_loss
#     model.nns = hcat(model.nns, x)
#     model.nn_labels = vcat(model.nn_labels, label)
#     # push!(model.nn_labels, label)
#   end
# end

# function trim_model_before_epoch(model)
#   nns_count = size(model.nns,2)
#   if nns_count > 0
#     keep_count = Int64(ceil(nns_count * TRIM_RATIO))
#     keep_is    = shuffle(1:nns_count)[1:keep_count]
#
#     model.nns    = model.nns[:, keep_is]
#     model.labels = model.labels[keep_is]
#   end
# end

function model_prediction(x)
  global model
  y = model(x)
  Flux.Tracker.data(y)
end

function show_extra_training_info()
  # global model
  # println(Flux.Tracker.data(model.w))
  # println(size(model.nns))
end

function model_load(saved_bson_path)
  global model
  global optimizer
  @load saved_bson_path model optimizer
end
