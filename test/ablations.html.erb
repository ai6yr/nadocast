<html>

<head>
  <title>Nadocast compared to SPC Outlooks</title>
  <style>
    body { margin: 0 }
    .hidden { display: none }
    *:not(h1) { font-size: 24px; font-weight: bold; color: darkblue; }
    label, select option { font-weight: normal }
    label { cursor: pointer }
    .options > span { display: inline-block; margin-right: 1em; }
    td { position: relative; }
    td > a > span { position: absolute; top: 5px; left: 32%; width: 36%; text-align: center; background: white; }
    img { min-height: 100px; } /* lazy load fewer images at once */
  </style>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<%
  HAZARDS = [
    ["tornado_mean_58", "mean_58"],
    ["tornado_prob_80", "prob_80"],
    ["tornado_mean_prob_138", "mean_prob_138"],
    ["tornado_mean_prob_computed_no_sv_219", "mean_prob_computed_no_sv_219"],
    ["tornado_mean_prob_computed_220", "mean_prob_computed_220"],
    ["tornado_mean_prob_computed_partial_climatology_227", "mean_prob_computed_partial_climatology_227"],
    ["tornado_mean_prob_computed_climatology_253", "mean_prob_computed_climatology_253"],
    ["tornado_mean_prob_computed_climatology_blurs_910", "mean_prob_computed_climatology_blurs_910"],
    ["tornado_mean_prob_computed_climatology_grads_1348", "mean_prob_computed_climatology_grads_1348"],
    ["tornado_mean_prob_computed_climatology_blurs_grads_2005", "mean_prob_computed_climatology_blurs_grads_2005"],
    ["tornado_mean_prob_computed_climatology_prior_next_hrs_691", "mean_prob_computed_climatology_prior_next_hrs_691"],
    ["tornado_mean_prob_computed_climatology_3hr_1567", "mean_prob_computed_climatology_3hr_1567"],
    ["tornado_full_13831", "full_13831"],
  ]
%>

<body>
  <div style="position:fixed; top:0; width: 100%; z-index: 1; background: white; border-bottom: solid 3px black; padding: 0.5em">
    <h1>Nadocast "2022" Tornado Model Ablation Studies (HREF-Only)</h1>
    <p>Dates below are not in the training data. You may want to zoom out.</p>
    <p class="options">
      <span>
      Sort by:
      <select name="sort_by">
        <option value="severity">Severity</option>
        <option value="date">Date</option>
      </select>
      </span>
      <span>Filter:
      <% HAZARDS.each do |hazard_name, hazard_title| %>
        <label><input type="checkbox" name="hazard" value="<%= hazard_name %>"><%= hazard_title %></label>
      <% end %>
      </span>
      <span>Time:
      <label><input type="radio" name="run_time" value="0z" checked>0Z vs 0600</label>
      <label><input type="radio" name="run_time" value="12z">12Z vs 1630</label>
      </span>
      <span>Calibration:
      <label><input type="radio" name="calibration" value="spc-like" checked>SPC-like</label>
      <label><input type="radio" name="calibration" value="absolute">Absolute</label>
      </span>
    </p>
    <script>
      function updateVisibility() {
        const thingsToShow = Array.from(document.querySelectorAll('input[name="hazard"]')).filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);
        // console.log(thingsToShow);
        document.querySelectorAll('[data-hazard-name]').forEach(elem => {
          if( thingsToShow.length === 0 || thingsToShow.includes(elem.dataset.hazardName) ) {
            elem.classList.remove("hidden")
          } else {
            elem.classList.add("hidden")
          }
        });
        sort();
      }
      function updateRunTime() {
        const is12z = document.querySelector('input[name="run_time"][value="12z"]').checked;
        const time_suffix_nc  = is12z ? "_t12z.png" : "_t00z.png";
        const time_suffix_spc = is12z ? "_t16z.png" : "_t06z.png";
        const time_str_nc  = is12z ? "12Z"  : "0Z";
        const time_str_spc = is12z ? "1630" : "0600";
        document.querySelectorAll('img').forEach(img => {
          if(img.src.includes("/nadocast_")) {
            img.src = img.src.replace(/_t\d+z\.png/, time_suffix_nc);
          } else if (img.src.includes("/spc_day_1_")) {
            img.src = img.src.replace(/_t\d+z\.png/, time_suffix_spc);
          }
        });
        document.querySelectorAll('td a').forEach(a => {
          if(a.href.includes("/nadocast_")) {
            a.href = a.href.replace(/_t\d+z\.png/, time_suffix_nc);
          } else if (a.href.includes("/spc_day_1_")) {
            a.href = a.href.replace(/_t\d+z\.png/, time_suffix_spc);
          }
        });
        document.querySelectorAll('.nc_run_time').forEach(elem => { elem.innerText = time_str_nc; });
        document.querySelectorAll('.spc_outlook_time').forEach(elem => { elem.innerText = time_str_spc; });
      }
      function updateCalibration() {
        const absolutely_calibrated = document.querySelector('input[name="calibration"][value="absolute"]').checked;
        const prefix = absolutely_calibrated ? "/nadocast$1_absolutely_calibrated_" : "/nadocast$1_";
        document.querySelectorAll('img').forEach(img => {
          img.src = img.src.replace(/\/nadocast(_href_only|_href_ablations)?(_absolutely_calibrated)?_/, prefix);
        });
        document.querySelectorAll('td a').forEach(a => {
          a.href = a.href.replace(/\/nadocast(_href_only|_href_ablations)?(_absolutely_calibrated)?_/, prefix);
        });
      }
      function sort() {
        const order = document.querySelector("[name=sort_by]").value;
        const tbody = document.querySelector("table > tbody");
        const rows_sorted = Array.from(tbody.children).sort((row1, row2) => {
          if (order === "severity") {
            const visibleCells1 = Array.from(row1.children).filter(td => !td.classList.contains("hidden"));
            const visibleCells2 = Array.from(row2.children).filter(td => !td.classList.contains("hidden"));
            const severity1 = visibleCells1.map(td => parseInt(td.dataset.severity || "0")).reduce((a,b) => a + b);
            const severity2 = visibleCells2.map(td => parseInt(td.dataset.severity || "0")).reduce((a,b) => a + b);
            return severity2 - severity1;
          } else { // Sort by date
            const date1_str = row1.children[0].innerText;
            const date2_str = row2.children[0].innerText;
            return date1_str.localeCompare(date2_str)
          }
        });
        rows_sorted.forEach(row => {
          row.remove();
          tbody.appendChild(row);
        });
      }
      document.querySelectorAll('[name=sort_by]').forEach(select => {
        select.onchange = sort;
      })
      document.querySelectorAll('input[name="hazard"]').forEach(checkbox => {
        checkbox.onchange = updateVisibility;
      })
      document.querySelectorAll('[name=run_time]').forEach(radio => {
        radio.onchange = updateRunTime;
      })
      document.querySelectorAll('[name=calibration]').forEach(radio => {
        radio.onchange = updateCalibration;
      })
    </script>
  </div>
  <table style="margin: 14em 0.5em">
    <%
      def version(map)
        map[/\Amaps(_2021)?\//, 1] == "_2021" ? 2021 : 2022
      end
      def predictor(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 1]
      end
      def ablation?(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 2] == "_href_ablations"
      end
      def absolutely_calibrated?(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 3] == "_absolutely_calibrated"
      end
      def hazard(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 4]
      end
      def bounded?(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 5]
      end
      def yyyymmdd(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 6]
      end
      def run_hour(map)
        map[/(nadocast|spc_day_1)(_href_only|_href_ablations)?(_absolutely_calibrated)?_(tornado|wind|wind_adj|hail|sig_tornado|sig_wind|sig_wind_adj|sig_hail|tornado_\w+_\d+)(_gated_by_\w+)?_(\d{8})_t(\d+)z.png$/, 7]
      end
      def sig?(map)
        hazard(map) =~ /_sig_/
      end
      def severity(map)
        return 0 unless map
        # Use file size to estimate severity (fast)
        File.size(map)
      end
      def map_img(map, label)
        map && "<a href=\"#{map}\" target=\"_blank\"><span>#{label}</span><img loading=\"lazy\" src=\"#{map}\"></a>"
      end
      maps = Dir.glob("maps/*/*ablations*.png")
      maps_by_day = {}
      maps.each do |map|
        maps_by_day[yyyymmdd(map)] ||= []
        maps_by_day[yyyymmdd(map)] << map
      end
      maps_by_day.keys.sort.each do |day|
        date_str     = [day[0...4], day[4...6], day[6...8]].join("-")
        # nadocast_0z  = maps_by_day[day].find { |map| predictor(map) == "nadocast"  && run_hour(map) == "00" }
        # nadocast_10z = maps_by_day[day].find { |map| predictor(map) == "nadocast"  && run_hour(map) == "10" }
        # nadocast_14z = maps_by_day[day].find { |map| predictor(map) == "nadocast"  && run_hour(map) == "14" }
        # spc_6z       = maps_by_day[day].find { |map| predictor(map) == "spc_day_1" && run_hour(map) == "06" }
        # spc_13z      = maps_by_day[day].find { |map| predictor(map) == "spc_day_1" && run_hour(map) == "13" }
        # spc_1630z    = maps_by_day[day].find { |map| predictor(map) == "spc_day_1" && run_hour(map) == "16" }
    %>
      <tr>
        <td><%= date_str %></td>
        <% HAZARDS.each do |hazard_name, hazard_title|
          nadocast_0z = maps_by_day[day].find { |map| version(map) == 2022 && predictor(map) == "nadocast" && ablation?(map) && hazard(map) == hazard_name && run_hour(map) == "00" && !absolutely_calibrated?(map) }
        %>
          <td data-hazard-name="<%= hazard_name %>" data-severity="<%= severity(nadocast_0z) %>"><%= map_img(nadocast_0z, "#{date_str} #{hazard_title.sub("tornado_","")} <span class=\"nc_run_time\">0Z</span>") %></td>
        <% end %>
      </tr>
    <%
      end
    %>
  </table>
  <script>
    updateVisibility(); // this will also sort
    updateRunTime();
    updateCalibration();
  </script>
</body>

</html>
